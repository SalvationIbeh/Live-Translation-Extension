# ../src/lib/

# Live Translation Extension Library Summary

## Overview
This library contains modules for a live translation extension, combining audio capture, speech recognition, translation, and caching services.

## File Summaries

### audioCapture.js
- Purpose: Handles audio capture from both microphone and browser tab.
- Key features:
  - Captures audio from microphone and browser tab simultaneously
  - Provides audio level feedback
  - Supports pausing and resuming capture
  - Allows selection of audio input devices
  - Implements separate audio processing for tab and mic audio
  - Handles WebRTC setup for two-way communication

### cacheService.js
- Purpose: Provides a caching mechanism for translation results and synthesized speech.
- Key features:
  - Uses IndexedDB for persistent storage
  - Fallback to in-memory cache for testing environments
  - Supports basic CRUD operations (set, get, clear)

### speechToText.js
- Purpose: Converts captured audio to text using speech recognition.
- Key features:
  - Utilizes browser's SpeechRecognition API
  - Supports continuous recognition and interim results
  - Handles language selection
  - Provides error handling and state management
  - Implements retry mechanism for network errors
  - Includes transcript formatting and handling of all-caps input

### textToSpeech.js
- Purpose: Converts translated text to speech.
- Key features:
  - Uses browser's built-in text-to-speech capabilities
  - Primarily uses Google TTS API for better quality
  - Falls back to browser's built-in TTS when Google TTS API fails
  - Supports voice selection, rate, pitch, and volume adjustment
  - Implements caching using CacheService for efficient repeat speech synthesis

### translation.js
- Purpose: Translates text between languages using an external API.
- Key features:
  - Integrates with Google Cloud Translation API
  - Implements caching for efficient repeat translations
  - Supports batch translation and language detection
  - Includes rate limiting and error handling
  - Pre-processes and post-processes text to preserve formatting
  - Uses a Web Worker for translation tasks

### translationPipeline.js
- Purpose: Orchestrates the entire translation process.
- Key features:
  - Combines AudioCapture, SpeechToText, Translation, and TextToSpeech modules
  - Manages the flow from audio capture to translated text and speech output
  - Provides start/stop functionality for the translation process
  - Handles separate processing and callbacks for tab and mic audio

## How They Work Together

1. The `TranslationPipeline` class in `translationPipeline.js` acts as the main coordinator.
2. When started, it initiates dual audio capture (tab and mic) using `AudioCapture`.
3. Captured audio from both sources is passed to `SpeechToText` for conversion to text.
4. The resulting text from each source is sent to the Translation module for translation.
5. Translated text is passed to TextToSpeech for audio output.
6. Throughout this process, CacheService is used to store and retrieve translations and synthesized speech, improving efficiency.
7. The final translated text and audio for both tab and mic sources are made available through separate callback functions.

This enhanced pipeline allows for real-time audio capture from multiple sources, transcription, translation, and text-to-speech conversion, making it suitable for live translation applications in a browser environment, particularly for web-based call centers and communication platforms.